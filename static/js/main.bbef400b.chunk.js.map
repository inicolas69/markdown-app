{"version":3,"sources":["index.js","Components/Footer.js","sampleText.js","App.js","serviceWorker.js"],"names":["id","FooterPage","color","className","fluid","href","style","fontSize","Date","getFullYear","target","sampleText","App","state","text","handleChange","event","value","setState","renderText","__html","marked","sanitize","localStorage","getItem","this","setItem","spellCheck","onChange","rows","dangerouslySetInnerHTML","Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","onkeydown","e","keyCode","val","start","selectionStart","end","selectionEnd","substring","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kNAcoBA,E,4JC+CLC,EAtDI,WACjB,OACE,kBAAC,IAAD,CAAWC,MAAM,OAAOC,UAAU,+BAChC,kBAAC,IAAD,CAAcC,OAAK,EAACD,UAAU,4BAC5B,yBAAKA,UAAU,SACb,wBAAIA,UAAU,eACZ,wBAAIA,UAAU,qBACZ,uBACEA,UAAU,oBACVE,KAAK,yDAEL,kBAAC,IAAD,CAAcC,MAAO,CAAEC,SAAU,QAGrC,wBAAIJ,UAAU,qBACZ,uBACEA,UAAU,oBACVE,KAAK,oCAEL,kBAAC,IAAD,CAAeC,MAAO,CAAEC,SAAU,QAGtC,wBAAIJ,UAAU,qBACZ,uBACEA,UAAU,oBACVE,KAAK,iCAEL,kBAAC,IAAD,CAAYC,MAAO,CAAEC,SAAU,QAGnC,wBAAIJ,UAAU,qBACZ,uBACEA,UAAU,oBACVE,KAAK,kCAEL,kBAAC,IAAD,CAAcC,MAAO,CAAEC,SAAU,WAM3C,yBAAKJ,UAAU,qCACb,kBAAC,IAAD,CAAcC,OAAK,GAAnB,SACU,IAAII,MAAOC,cADrB,mBAC8C,IAC5C,uBAAGJ,KAAK,kCAAkCK,OAAO,SAC9C,IADH,kBAEkB,S,iBCrDfC,EACX,mpBCmEaC,E,4MA3DbC,MAAQ,CACNC,KAAMH,G,EAgBRI,aAAe,SAAAC,GACb,IAAMF,EAAOE,EAAMN,OAAOO,MAC1B,EAAKC,SAAS,CAAEJ,U,EAGlBK,WAAa,SAAAL,GAEX,MAAO,CAAEM,OADMC,IAAOP,EAAM,CAAEQ,UAAU,M,kEAlBxC,IAAMR,EAAOS,aAAaC,QAAQ,QAE9BV,GACFW,KAAKP,SAAS,CAAEJ,W,2CAIG,IACbA,EAASW,KAAKZ,MAAdC,KACRS,aAAaG,QAAQ,OAAQZ,K,+BAc7B,OACE,yBAAKX,UAAU,OACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,QAAQH,GAAG,SAAzB,uBACA,yBAAKG,UAAU,OACb,yBAAKA,UAAU,YACb,wBAAIA,UAAU,SAAd,YACA,8BACEH,GAAG,cACH2B,WAAW,QACXC,SAAUH,KAAKV,aACfE,MAAOQ,KAAKZ,MAAMC,KAClBX,UAAU,eACV0B,KAAK,QAGT,yBAAK1B,UAAU,YACb,wBAAIA,UAAU,SAAd,eACA,yBACE2B,wBAAyBL,KAAKN,WAAWM,KAAKZ,MAAMC,MACpDX,UAAU,gBAKlB,kBAAC4B,EAAD,W,GAtDUC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DJXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SAGN1C,EAuBV,cAtBCyC,SAASC,eAAe1C,GAC9B2C,UAAY,SAAUC,GACvB,GAAkB,IAAdA,EAAEC,QAAe,CAInB,IAAIC,EAAMrB,KAAKR,MACb8B,EAAQtB,KAAKuB,eACbC,EAAMxB,KAAKyB,aASb,OANAzB,KAAKR,MAAQ6B,EAAIK,UAAU,EAAGJ,GAAS,KAAOD,EAAIK,UAAUF,GAG5DxB,KAAKuB,eAAiBvB,KAAKyB,aAAeH,EAAQ,GAG3C,IImGP,kBAAmBK,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bbef400b.chunk.js","sourcesContent":["import 'bootstrap/dist/css/bootstrap.css'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\nfunction enableTab (id) {\n  var el = document.getElementById(id)\n  el.onkeydown = function (e) {\n    if (e.keyCode === 9) {\n      // tab was pressed\n\n      // get caret position/selection\n      var val = this.value,\n        start = this.selectionStart,\n        end = this.selectionEnd\n\n      // set textarea value to: text before caret + tab + text after caret\n      this.value = val.substring(0, start) + '\\t' + val.substring(end)\n\n      // put caret at right position again\n      this.selectionStart = this.selectionEnd = start + 1\n\n      // prevent the focus lose\n      return false\n    }\n  }\n}\n\nenableTab('my-textarea')\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import React from 'react'\nimport { MDBContainer, MDBFooter } from 'mdbreact'\nimport LinkedInIcon from '@material-ui/icons/LinkedIn'\nimport InstagramIcon from '@material-ui/icons/Instagram'\nimport GitHubIcon from '@material-ui/icons/GitHub'\nimport FacebookIcon from '@material-ui/icons/Facebook'\n\nconst FooterPage = () => {\n  return (\n    <MDBFooter color='blue' className='footer font-small pt-4 mt-4'>\n      <MDBContainer fluid className='text-center text-md-left'>\n        <div className='links'>\n          <ul className='social-list'>\n            <li className='social-list__item'>\n              <a\n                className='social-list__link'\n                href='https://www.linkedin.com/in/nicolas-iniesta-417653b0/'\n              >\n                <LinkedInIcon style={{ fontSize: 40 }} />\n              </a>\n            </li>\n            <li className='social-list__item'>\n              <a\n                className='social-list__link'\n                href='https://www.instagram.com/piixn/'\n              >\n                <InstagramIcon style={{ fontSize: 40 }} />\n              </a>\n            </li>\n            <li className='social-list__item'>\n              <a\n                className='social-list__link'\n                href='https://github.com/inicolas69'\n              >\n                <GitHubIcon style={{ fontSize: 40 }} />\n              </a>\n            </li>\n            <li className='social-list__item'>\n              <a\n                className='social-list__link'\n                href='https://www.facebook.com/PiiXN'\n              >\n                <FacebookIcon style={{ fontSize: 40 }} />\n              </a>\n            </li>\n          </ul>\n        </div>\n      </MDBContainer>\n      <div className='footer-copyright text-center py-3'>\n        <MDBContainer fluid>\n          &copy; {new Date().getFullYear()} Créé par:{' '}\n          <a href='https://www.nicolasiniesta.com/' target='blank'>\n            {' '}\n            Nicolas Iniesta{' '}\n          </a>\n        </MDBContainer>\n      </div>\n    </MDBFooter>\n  )\n}\n\nexport default FooterPage\n","export const sampleText =\n  '# Titre 1\\n## Titre 2 \\n### Titre 3\\n \\nLes paragraphes sont séparés\\npar une ligne vide.\\n\\nLaissé deux espaces à la fin d\\'une ligne pour  \\naller à la ligne.\\n\\nAttributs *italique*, **gras**, `monospace`, ~~rayé~~.\\n\\nPossibilité aussi de combiner les attributs :  \\n**`monospace gras`**  \\n*~~italique rayé~~*  \\n...\\n\\nListe:\\n\\n  * Drôle\\n  * Consciencieux\\n  * Travailleur\\n\\nListe numérotée:\\n\\n  1. Ruby on Rails\\n  2. NodeJS\\n  3. ReactJS  \\n\\n*[Nicolas Iniesta](https://www.nicolasiniesta.com/)* \\n\\nLien automatique : https://www.linkedin.com/in/nicolas-iniesta-417653b0/ \\n\\n```\\n console.log(\"hello\"); \\n``` '\n","import React, { Component } from 'react'\nimport './App.css'\nimport FooterPage from './Components/Footer'\n\nimport marked from 'marked'\n\nimport { sampleText } from './sampleText'\n\nclass App extends Component {\n  state = {\n    text: sampleText\n  }\n\n  componentDidMount () {\n    const text = localStorage.getItem('text')\n\n    if (text) {\n      this.setState({ text })\n    }\n  }\n\n  componentDidUpdate () {\n    const { text } = this.state\n    localStorage.setItem('text', text)\n  }\n\n  handleChange = event => {\n    const text = event.target.value\n    this.setState({ text })\n  }\n\n  renderText = text => {\n    const __html = marked(text, { sanitize: true })\n    return { __html }\n  }\n\n  render () {\n    return (\n      <div className='App'>\n        <div className='container'>\n          <h1 className='title' id='title'>Editeur de Markdown</h1>\n          <div className='row'>\n            <div className='col-sm-6'>\n              <h2 className='title'>Markdown</h2>\n              <textarea\n                id='my-textarea'\n                spellCheck='false'\n                onChange={this.handleChange}\n                value={this.state.text}\n                className='form-control'\n                rows='35'\n              />\n            </div>\n            <div className='col-sm-6'>\n              <h2 className='title'>Résultat</h2>\n              <div\n                dangerouslySetInnerHTML={this.renderText(this.state.text)}\n                className='resultat'\n              />\n            </div>\n          </div>\n        </div>\n        <FooterPage />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n"],"sourceRoot":""}